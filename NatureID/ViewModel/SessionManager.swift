//
//  UserViewModel.swift
//  NatureID
//
//  Created by MacNCheese on 13/09/2023.
//

import Foundation
import FirebaseAuth
import FirebaseFirestore
import FirebaseFirestoreSwift
import LocalAuthentication

class SessionManager : ObservableObject{
    @Published var user : User = User()
    @Published var isLoading = true
    
    let db = Firestore.firestore()
    let auth = Auth.auth()
    init() {
        // MARK: State listener to update user if Auth changes
        self.auth.addStateDidChangeListener { auth, user in
            if let user = user {
                self.getUser(id: user.uid)
            }else {
                self.user = User()
                self.isLoading = false
            }
        }
    }
    
    
    
    func register(email : String, userName : String, password : String, image : UIImage, completion: @escaping (String?) -> Void) {
        if(userName.isEmpty) {
            completion("Please enter a username")
            return
        }
        isLoading = true
        
        // MARK: create new user in AUTH
        auth.createUser(withEmail: email, password: password){ authResult, error in
            if error != nil{
                completion(error!.localizedDescription)
                self.isLoading = false
                return
            }
            if let authResult = authResult {
                var newUser = User()
                let currentUser = authResult.user
                
                newUser.id = currentUser.uid
                newUser.email = currentUser.email!
                newUser.userName = userName
                // Upload image
                ImageManager.upload(image: image, name: currentUser.uid) { url in
                    if let url = url{
                        newUser.photoUrl = url.absoluteString
                        self.createUser(user: newUser)
                    }else {
                        self.isLoading = false
                        completion("Upload image failed")
                        return
                    }
                }
            }else {
                self.isLoading = false
                completion("Register failed")
                return
            }
            self.isLoading = false
            completion(nil)
        }
    }
    
    // MARK: Login with AUTH
    func login(email : String, password : String, completion: @escaping (String?) -> Void) {
        isLoading = true
        auth.signIn(withEmail: email, password: password) { authResult, error in
            self.isLoading = false
            if(error != nil){
                print(error!)
                completion(error!.localizedDescription)
                return
            }
            if authResult != nil {
                completion(nil)
                return
            }
            completion("Error logging in")
        }
    }
    
    // MARK: FaceID Authentication
    func faceIDAuth(email : String, password : String, completion: @escaping (String?) -> Void) {
        let context = LAContext()
        var error : NSError?
        
        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {
            context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: "To Login") { success, authError in
                if (authError != nil) {
                    print(authError!)
                    completion(authError?.localizedDescription)
                    return
                }
                if(success) {
                    DispatchQueue.main.async {
                        self.login(email: email, password: password) { errorMsg in
                            completion(errorMsg)
                        }
                    }
                } else {
                    completion("Authentication Failed")
                }
            }
        } else {completion("FaceID not available")}
    }
    
    // MARK: Logout of AUTH
    func logout() {
        do {
            try auth.signOut()
        } catch {
            print(error)
        }
    }
    
    // MARK: Create new user in database
    func createUser(user : User){
        // ID generated by Firebase Auth
        do {
            isLoading = true
            try db.collection("user").document(user.id!).setData(from: user, completion: { error in
                if let error = error{
                    print(error.localizedDescription)
                }
                self.isLoading = false
            })
        } catch {
            isLoading = false
            print(error.localizedDescription)
        }
    }
    
    // MARK: Get user from database
    func getUser(id : String) {
        self.isLoading = true
        db.collection("user").document(id).addSnapshotListener { docSnapshot, error in
            self.isLoading = false
            if(error != nil){
                print(error!.localizedDescription)
                return
            }
            
            do {
                guard let doc = try docSnapshot?.data(as: User.self) else {return}
                self.user = doc
            }catch {
                print(error.localizedDescription)
            }
        }
    }
    
    // MARK: Update user
    func updateUser(user : User, image : UIImage?, completion: @escaping (Bool) -> Void) {
        if(user.id == nil){
            return
        }
        
        var editUser = user
        self.isLoading = true
        
        guard let image = image else {updateDBFunc(user: editUser) { success in
            completion(success)
        }; return}
        
        // If has image, upload, then update user
        ImageManager.upload(image: image, name: editUser.id!) { url in
            guard let url = url else {
                print("Error upload image")
                self.isLoading = false
                completion(false)
                return
            }
            editUser.photoUrl = url.absoluteString
            self.updateDBFunc(user: editUser) { success in
                completion(success)
            }
        }
    }
    
    // To update the user in the database
    private func updateDBFunc(user : User, completion: @escaping (Bool) -> Void) {
        do {
            try db.collection("user").document(user.id!).setData(from: user) { error in
                self.isLoading = false

                if(error != nil){
                    print(error!)
                    completion(false)
                    return
                }else {
                    completion(true)
                }
            }
        } catch {
            print(error)
            completion(false)
            self.isLoading = false
        }
    }
}
