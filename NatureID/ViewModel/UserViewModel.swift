//
//  UserViewModel.swift
//  NatureID
//
//  Created by MacNCheese on 13/09/2023.
//

import Foundation
import SwiftUI
import FirebaseAuth
import FirebaseFirestore
import FirebaseFirestoreSwift

class UserViewModel : ObservableObject{
    @Published var user : User = User()
    @Published var isLoggedIn : Bool
    
    let imageManager = ImageManager()
    let db = Firestore.firestore()
    let auth = Auth.auth()
    
    init() {
        let currentUser = auth.currentUser
        
        if(currentUser == nil){
            self.isLoggedIn = false
        }else {
            self.isLoggedIn = true
            // Fetch current user
        }
    }
    
    func register(email : String, password : String, image : UIImage, completion: @escaping (String?) -> Void) {
        
        // MARK: create new user
        auth.createUser(withEmail: email, password: password){ authResult, error in
            if error != nil{
                completion(error!.localizedDescription)
                return
            }
            if let authResult = authResult {
                var newUser = User()
                let currentUser = authResult.user
                
                newUser.id = currentUser.uid
                newUser.email = currentUser.email
                // Upload image
                self.imageManager.upload(image: image, name: currentUser.uid) { url in
                    if let url = url{
                        newUser.photoUrl = url.absoluteString
                        self.createUser(user: newUser)
                    }else { completion("Upload image failed"); return }
                }
            }else { completion("Register failed"); return }
             
            completion(nil)
        }
    }
    
    func login(email : String, password : String, completion: @escaping (String?) -> Void) {
        
        auth.signIn(withEmail: email, password: password) { authResult, error in
            if(error != nil){
                completion(error!.localizedDescription)
                return
            }
            if let authResult = authResult {
                self.getUser(id: authResult.user.uid) { user in
                    if let user = user {
                        self.user = user
                    }
                }
                
                withAnimation {
                    self.isLoggedIn = true
                }
                completion(nil)
                return
            }
            completion("Error logging in")
        }
    }
    
    func logout() {
        do {
            try auth.signOut()
            user = User()
            withAnimation {
                self.isLoggedIn = false
            }
        } catch {
            print(error)
        }
    }
    
    func createUser(user : User){
        // ID generated by Firebase Auth
        do {
            try db.collection("user").document(user.id!).setData(from: user, completion: { error in
                if let error = error{
                    print(error.localizedDescription)
                }
            })
        } catch {
            print(error.localizedDescription)
        }
    }
    
    func getUser(id : String, completion: @escaping (User?) -> Void) {
        let docRef = db.collection("user").document(id)
        docRef.getDocument { document, error in
            if error != nil {
                print(error!.localizedDescription)
                completion(nil)
                return
            }
            
            if let document = document {
                do {
                    let user = try document.data(as: User.self)
                    completion(user)
                }
                catch {
                    print(error)
                    completion(nil)
                    return
                }
            }
        }
    }
    
}
